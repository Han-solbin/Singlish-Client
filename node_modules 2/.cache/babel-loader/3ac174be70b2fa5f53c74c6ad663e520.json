{"ast":null,"code":"import _objectSpread from \"/Users/hansolbin/Documents/GitHub/singlish-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { StringParam } from \"serialize-query-params\";\nfunction convertInheritedParamStringsToParams(paramConfigMapWithInherit, options) {\n  var _a, _b, _c;\n  var paramConfigMap = {};\n  var hasInherit = false;\n  var hookKeys = Object.keys(paramConfigMapWithInherit);\n  var paramKeys = hookKeys;\n  var includeKnownParams = options.includeKnownParams || options.includeKnownParams !== false && hookKeys.length === 0;\n  if (includeKnownParams) {\n    var knownKeys = Object.keys((_a = options.params) != null ? _a : {});\n    paramKeys.push.apply(paramKeys, knownKeys);\n  }\n  for (var _i = 0, _paramKeys = paramKeys; _i < _paramKeys.length; _i++) {\n    var key = _paramKeys[_i];\n    var param = paramConfigMapWithInherit[key];\n    if (param != null && typeof param === \"object\") {\n      paramConfigMap[key] = param;\n      continue;\n    }\n    hasInherit = true;\n    paramConfigMap[key] = (_c = (_b = options.params) == null ? void 0 : _b[key]) != null ? _c : StringParam;\n  }\n  if (!hasInherit) return paramConfigMapWithInherit;\n  return paramConfigMap;\n}\nfunction extendParamConfigForKeys(baseParamConfigMap, paramKeys, inheritedParams, defaultParam) {\n  var _a;\n  if (!inheritedParams || !paramKeys.length) return baseParamConfigMap;\n  var paramConfigMap = _objectSpread({}, baseParamConfigMap);\n  var hasInherit = false;\n  var _iterator = _createForOfIteratorHelper(paramKeys),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var paramKey = _step.value;\n      if (!Object.prototype.hasOwnProperty.call(paramConfigMap, paramKey)) {\n        paramConfigMap[paramKey] = (_a = inheritedParams[paramKey]) != null ? _a : defaultParam;\n        hasInherit = true;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  if (!hasInherit) return baseParamConfigMap;\n  return paramConfigMap;\n}\nexport { convertInheritedParamStringsToParams, extendParamConfigForKeys };","map":null,"metadata":{},"sourceType":"module"}