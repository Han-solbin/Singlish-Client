{"ast":null,"code":"import _slicedToArray from \"/Users/hansolbin/Documents/GitHub/singlish-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport shallowEqual from \"./shallowEqual\";\nimport { deserializeUrlNameMap } from \"./urlName\";\nvar cachedSearchString;\nvar cachedUrlNameMapString;\nvar cachedSearchStringToObjectFn;\nvar cachedParsedQuery = {};\nvar memoSearchStringToObject = function memoSearchStringToObject(searchStringToObject, searchString, urlNameMapStr) {\n  if (cachedSearchString === searchString && cachedSearchStringToObjectFn === searchStringToObject && cachedUrlNameMapString === urlNameMapStr) {\n    return cachedParsedQuery;\n  }\n  cachedSearchString = searchString;\n  cachedSearchStringToObjectFn = searchStringToObject;\n  var newParsedQuery = searchStringToObject(searchString != null ? searchString : \"\");\n  cachedUrlNameMapString = urlNameMapStr;\n  var urlNameMap = deserializeUrlNameMap(urlNameMapStr);\n  for (var _i = 0, _Object$entries = Object.entries(newParsedQuery); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      key = _Object$entries$_i[0],\n      value = _Object$entries$_i[1];\n    if (urlNameMap == null ? void 0 : urlNameMap[key]) {\n      delete newParsedQuery[key];\n      key = urlNameMap[key];\n      newParsedQuery[key] = value;\n    }\n    var oldValue = cachedParsedQuery[key];\n    if (shallowEqual(value, oldValue)) {\n      newParsedQuery[key] = oldValue;\n    }\n  }\n  cachedParsedQuery = newParsedQuery;\n  return newParsedQuery;\n};\nexport { memoSearchStringToObject };","map":null,"metadata":{},"sourceType":"module"}