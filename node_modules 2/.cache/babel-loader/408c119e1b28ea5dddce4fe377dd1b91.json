{"ast":null,"code":"import * as React from \"react\";\nimport { mergeOptions, defaultOptions } from \"./options\";\nvar providerlessContextValue = {\n  adapter: {},\n  options: defaultOptions\n};\nvar QueryParamContext = React.createContext(providerlessContextValue);\nfunction useQueryParamContext() {\n  var value = React.useContext(QueryParamContext);\n  if (value === void 0 || value === providerlessContextValue) {\n    throw new Error(\"useQueryParams must be used within a QueryParamProvider\");\n  }\n  return value;\n}\nfunction QueryParamProviderInner(_ref) {\n  var children = _ref.children,\n    adapter = _ref.adapter,\n    options = _ref.options;\n  var _React$useContext = React.useContext(QueryParamContext),\n    parentAdapter = _React$useContext.adapter,\n    parentOptions = _React$useContext.options;\n  var value = React.useMemo(function () {\n    return {\n      adapter: adapter != null ? adapter : parentAdapter,\n      options: mergeOptions(parentOptions, options)\n    };\n  }, [adapter, options, parentAdapter, parentOptions]);\n  return /* @__PURE__ */React.createElement(QueryParamContext.Provider, {\n    value: value\n  }, children);\n}\nfunction QueryParamProvider(_ref2) {\n  var children = _ref2.children,\n    adapter = _ref2.adapter,\n    options = _ref2.options;\n  var Adapter = adapter;\n  return Adapter ? /* @__PURE__ */React.createElement(Adapter, null, function (adapter2) {\n    return /* @__PURE__ */React.createElement(QueryParamProviderInner, {\n      adapter: adapter2,\n      options: options\n    }, children);\n  }) : /* @__PURE__ */React.createElement(QueryParamProviderInner, {\n    options: options\n  }, children);\n}\nvar QueryParamProvider_default = QueryParamProvider;\nexport { QueryParamContext, QueryParamProvider, QueryParamProvider_default as default, useQueryParamContext };","map":null,"metadata":{},"sourceType":"module"}