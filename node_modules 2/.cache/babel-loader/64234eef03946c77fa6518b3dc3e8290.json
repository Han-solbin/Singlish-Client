{"ast":null,"code":"import _objectSpread from \"/Users/hansolbin/Documents/GitHub/singlish-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/hansolbin/Documents/GitHub/singlish-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { objectToSearchString } from \"./objectToSearchString\";\nimport { searchStringToObject } from \".\";\nvar JSON_SAFE_CHARS = \"{}[],\\\":\".split(\"\").map(function (d) {\n  return [d, encodeURIComponent(d)];\n});\nfunction getHrefFromLocation(location, search) {\n  var href = search;\n  if (location.href) {\n    try {\n      var url = new URL(location.href);\n      href = \"\".concat(url.origin).concat(url.pathname).concat(search);\n    } catch (e) {\n      href = \"\";\n    }\n  }\n  return href;\n}\nfunction transformSearchStringJsonSafe(searchString) {\n  var str = searchString;\n  var _iterator = _createForOfIteratorHelper(JSON_SAFE_CHARS),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n        char = _step$value[0],\n        code = _step$value[1];\n      str = str.replace(new RegExp(\"\\\\\" + code, \"g\"), char);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return str;\n}\nfunction updateLocation(encodedQuery, location) {\n  var objectToSearchStringFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : objectToSearchString;\n  var encodedSearchString = objectToSearchStringFn(encodedQuery);\n  var search = encodedSearchString.length ? \"?\".concat(encodedSearchString) : \"\";\n  var newLocation = _objectSpread({}, location, {\n    key: \"\".concat(Date.now()),\n    href: getHrefFromLocation(location, search),\n    search: search,\n    query: encodedQuery\n  });\n  return newLocation;\n}\nfunction updateInLocation(encodedQueryReplacements, location) {\n  var objectToSearchStringFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : objectToSearchString;\n  var searchStringToObjectFn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : searchStringToObject;\n  var currQuery = searchStringToObjectFn(location.search);\n  var newQuery = _objectSpread({}, currQuery, encodedQueryReplacements);\n  return updateLocation(newQuery, location, objectToSearchStringFn);\n}\nexport { transformSearchStringJsonSafe, updateInLocation, updateLocation };","map":null,"metadata":{},"sourceType":"module"}