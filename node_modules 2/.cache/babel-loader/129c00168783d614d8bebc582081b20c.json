{"ast":null,"code":"import _slicedToArray from \"/Users/hansolbin/Documents/GitHub/singlish-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { StringParam } from \"serialize-query-params\";\nimport { decodedParamCache } from \"./decodedParamCache\";\nimport { extendParamConfigForKeys, convertInheritedParamStringsToParams } from \"./inheritedParams\";\nimport { makeStableGetLatestDecodedValues } from \"./latestValues\";\nimport { memoSearchStringToObject } from \"./memoSearchStringToObject\";\nimport { mergeOptions } from \"./options\";\nimport { useQueryParamContext } from \"./QueryParamProvider\";\nimport { enqueueUpdate } from \"./updateSearchString\";\nimport { serializeUrlNameMap } from \"./urlName\";\nfunction useQueryParams(arg1, arg2) {\n  var _useQueryParamContext = useQueryParamContext(),\n    adapter = _useQueryParamContext.adapter,\n    contextOptions = _useQueryParamContext.options;\n  var _useState = useState(makeStableGetLatestDecodedValues),\n    _useState2 = _slicedToArray(_useState, 1),\n    stableGetLatest = _useState2[0];\n  var _parseArguments = parseArguments(arg1, arg2),\n    paramConfigMapWithInherit = _parseArguments.paramConfigMap,\n    options = _parseArguments.options;\n  var mergedOptions = useMemo(function () {\n    return mergeOptions(contextOptions, options);\n  }, [contextOptions, options]);\n  var paramConfigMap = convertInheritedParamStringsToParams(paramConfigMapWithInherit, mergedOptions);\n  var parsedParams = memoSearchStringToObject(mergedOptions.searchStringToObject, adapter.location.search, serializeUrlNameMap(paramConfigMap));\n  if (mergedOptions.includeAllParams) {\n    paramConfigMap = extendParamConfigForKeys(paramConfigMap, Object.keys(parsedParams), mergedOptions.params, StringParam);\n  }\n  var decodedValues = stableGetLatest(parsedParams, paramConfigMap, decodedParamCache);\n  var paramKeyString = Object.keys(paramConfigMap).join(\"\\0\");\n  useEffect(function () {\n    var paramNames = paramKeyString.split(\"\\0\");\n    decodedParamCache.registerParams(paramNames);\n    return function () {\n      decodedParamCache.unregisterParams(paramNames);\n    };\n  }, [paramKeyString]);\n  var callbackDependencies = {\n    adapter: adapter,\n    paramConfigMap: paramConfigMap,\n    options: mergedOptions\n  };\n  var callbackDependenciesRef = useRef(callbackDependencies);\n  if (callbackDependenciesRef.current == null) {\n    callbackDependenciesRef.current = callbackDependencies;\n  }\n  useEffect(function () {\n    callbackDependenciesRef.current.adapter = adapter;\n    callbackDependenciesRef.current.paramConfigMap = paramConfigMap;\n    callbackDependenciesRef.current.options = mergedOptions;\n  }, [adapter, paramConfigMap, mergedOptions]);\n  var _useState3 = useState(function () {\n      var setQuery2 = function setQuery2(changes, updateType) {\n        var _callbackDependencies = callbackDependenciesRef.current,\n          adapter2 = _callbackDependencies.adapter,\n          paramConfigMap2 = _callbackDependencies.paramConfigMap,\n          options2 = _callbackDependencies.options;\n        if (updateType == null) updateType = options2.updateType;\n        enqueueUpdate({\n          changes: changes,\n          updateType: updateType,\n          currentSearchString: adapter2.location.search,\n          paramConfigMap: paramConfigMap2,\n          options: options2,\n          adapter: adapter2\n        }, {\n          immediate: !options2.enableBatching\n        });\n      };\n      return setQuery2;\n    }),\n    _useState4 = _slicedToArray(_useState3, 1),\n    setQuery = _useState4[0];\n  return [decodedValues, setQuery];\n}\nvar useQueryParams_default = useQueryParams;\nfunction parseArguments(arg1, arg2) {\n  var paramConfigMap;\n  var options;\n  if (arg1 === void 0) {\n    paramConfigMap = {};\n    options = arg2;\n  } else if (Array.isArray(arg1)) {\n    paramConfigMap = Object.fromEntries(arg1.map(function (key) {\n      return [key, \"inherit\"];\n    }));\n    options = arg2;\n  } else {\n    paramConfigMap = arg1;\n    options = arg2;\n  }\n  return {\n    paramConfigMap: paramConfigMap,\n    options: options\n  };\n}\nexport { useQueryParams_default as default, useQueryParams };","map":null,"metadata":{},"sourceType":"module"}