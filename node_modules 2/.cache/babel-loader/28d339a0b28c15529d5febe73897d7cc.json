{"ast":null,"code":"import _objectSpread from \"/Users/hansolbin/Documents/GitHub/singlish-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { encodeQueryParams } from \"serialize-query-params\";\nimport { decodedParamCache } from \"./decodedParamCache\";\nimport { extendParamConfigForKeys } from \"./inheritedParams\";\nimport { getLatestDecodedValues } from \"./latestValues\";\nimport { memoSearchStringToObject } from \"./memoSearchStringToObject\";\nimport { removeDefaults } from \"./removeDefaults\";\nimport { applyUrlNames } from \"./urlName\";\nfunction getUpdatedSearchString(_ref) {\n  var changes = _ref.changes,\n    updateType = _ref.updateType,\n    currentSearchString = _ref.currentSearchString,\n    baseParamConfigMap = _ref.paramConfigMap,\n    options = _ref.options;\n  var searchStringToObject = options.searchStringToObject,\n    objectToSearchString = options.objectToSearchString;\n  if (updateType == null) updateType = options.updateType;\n  var encodedChanges;\n  var parsedParams = memoSearchStringToObject(searchStringToObject, currentSearchString);\n  var paramConfigMap = extendParamConfigForKeys(baseParamConfigMap, Object.keys(changes), options.params);\n  var changesToUse;\n  if (typeof changes === \"function\") {\n    var latestValues = getLatestDecodedValues(parsedParams, paramConfigMap, decodedParamCache);\n    changesToUse = changes(latestValues);\n  } else {\n    changesToUse = changes;\n  }\n  encodedChanges = encodeQueryParams(paramConfigMap, changesToUse);\n  if (options.removeDefaultsFromUrl) {\n    removeDefaults(encodedChanges, paramConfigMap);\n  }\n  encodedChanges = applyUrlNames(encodedChanges, paramConfigMap);\n  var newSearchString;\n  if (updateType === \"push\" || updateType === \"replace\") {\n    newSearchString = objectToSearchString(encodedChanges);\n  } else {\n    newSearchString = objectToSearchString(_objectSpread({}, parsedParams, encodedChanges));\n  }\n  if ((newSearchString == null ? void 0 : newSearchString.length) && newSearchString[0] !== \"?\") {\n    newSearchString = \"?\".concat(newSearchString);\n  }\n  return newSearchString != null ? newSearchString : \"\";\n}\nfunction updateSearchString(_ref2) {\n  var searchString = _ref2.searchString,\n    adapter = _ref2.adapter,\n    navigate = _ref2.navigate,\n    updateType = _ref2.updateType;\n  var currentLocation = adapter.location;\n  var newLocation = _objectSpread({}, currentLocation, {\n    search: searchString\n  });\n  if (navigate) {\n    if (typeof updateType === \"string\" && updateType.startsWith(\"replace\")) {\n      adapter.replace(newLocation);\n    } else {\n      adapter.push(newLocation);\n    }\n  }\n}\nvar immediateTask = function immediateTask(task) {\n  return task();\n};\nvar timeoutTask = function timeoutTask(task) {\n  return setTimeout(function () {\n    return task();\n  }, 0);\n};\nvar updateQueue = [];\nfunction enqueueUpdate(args) {\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    immediate = _ref3.immediate;\n  updateQueue.push(args);\n  var scheduleTask = immediate ? immediateTask : timeoutTask;\n  if (updateQueue.length === 1) {\n    scheduleTask(function () {\n      var updates = updateQueue.slice();\n      updateQueue.length = 0;\n      var initialSearchString = updates[0].currentSearchString;\n      var searchString;\n      for (var i = 0; i < updates.length; ++i) {\n        var modifiedUpdate = i === 0 ? updates[i] : _objectSpread({}, updates[i], {\n          currentSearchString: searchString\n        });\n        searchString = getUpdatedSearchString(modifiedUpdate);\n      }\n      if (args.options.skipUpdateWhenNoChange && searchString === initialSearchString) {\n        return;\n      }\n      updateSearchString({\n        searchString: searchString != null ? searchString : \"\",\n        adapter: updates[updates.length - 1].adapter,\n        navigate: true,\n        updateType: updates[updates.length - 1].updateType\n      });\n    });\n  }\n}\nexport { enqueueUpdate, getUpdatedSearchString, updateSearchString };","map":null,"metadata":{},"sourceType":"module"}