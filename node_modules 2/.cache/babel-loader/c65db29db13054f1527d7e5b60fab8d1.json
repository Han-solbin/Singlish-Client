{"ast":null,"code":"import _classCallCheck from \"/Users/hansolbin/Documents/GitHub/singlish-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hansolbin/Documents/GitHub/singlish-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar DecodedParamCache = /*#__PURE__*/function () {\n  function DecodedParamCache() {\n    _classCallCheck(this, DecodedParamCache);\n    this.paramsMap = /* @__PURE__ */new Map();\n    this.registeredParams = /* @__PURE__ */new Map();\n  }\n  _createClass(DecodedParamCache, [{\n    key: \"set\",\n    value: function set(param, stringifiedValue, decodedValue, decode) {\n      this.paramsMap.set(param, {\n        stringified: stringifiedValue,\n        decoded: decodedValue,\n        decode: decode\n      });\n    }\n  }, {\n    key: \"has\",\n    value: function has(param, stringifiedValue, decode) {\n      if (!this.paramsMap.has(param)) return false;\n      var cachedParam = this.paramsMap.get(param);\n      if (!cachedParam) return false;\n      return cachedParam.stringified === stringifiedValue && (decode == null || cachedParam.decode === decode);\n    }\n  }, {\n    key: \"get\",\n    value: function get(param) {\n      var _a;\n      if (this.paramsMap.has(param)) return (_a = this.paramsMap.get(param)) == null ? void 0 : _a.decoded;\n      return void 0;\n    }\n  }, {\n    key: \"registerParams\",\n    value: function registerParams(paramNames) {\n      var _iterator = _createForOfIteratorHelper(paramNames),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var param = _step.value;\n          var currValue = this.registeredParams.get(param) || 0;\n          this.registeredParams.set(param, currValue + 1);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"unregisterParams\",\n    value: function unregisterParams(paramNames) {\n      var _iterator2 = _createForOfIteratorHelper(paramNames),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var param = _step2.value;\n          var value = (this.registeredParams.get(param) || 0) - 1;\n          if (value <= 0) {\n            this.registeredParams.delete(param);\n            if (this.paramsMap.has(param)) {\n              this.paramsMap.delete(param);\n            }\n          } else {\n            this.registeredParams.set(param, value);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.paramsMap.clear();\n      this.registeredParams.clear();\n    }\n  }]);\n  return DecodedParamCache;\n}();\nvar decodedParamCache = new DecodedParamCache();\nexport { DecodedParamCache, decodedParamCache };","map":null,"metadata":{},"sourceType":"module"}