{"ast":null,"code":"import _slicedToArray from \"/Users/hansolbin/Documents/GitHub/singlish-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _construct from \"/Users/hansolbin/Documents/GitHub/singlish-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"/Users/hansolbin/Documents/GitHub/singlish-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nfunction getEncodedValue(input, allowEmptyString) {\n  if (input == null) {\n    return input;\n  }\n  if (input.length === 0 && (!allowEmptyString || allowEmptyString && input !== \"\")) {\n    return null;\n  }\n  var str = input instanceof Array ? input[0] : input;\n  if (str == null) {\n    return str;\n  }\n  if (!allowEmptyString && str === \"\") {\n    return null;\n  }\n  return str;\n}\nfunction getEncodedValueArray(input) {\n  if (input == null) {\n    return input;\n  }\n  return input instanceof Array ? input : input === \"\" ? [] : [input];\n}\nfunction encodeDate(date) {\n  if (date == null) {\n    return date;\n  }\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1;\n  var day = date.getDate();\n  return \"\".concat(year, \"-\").concat(month < 10 ? \"0\".concat(month) : month, \"-\").concat(day < 10 ? \"0\".concat(day) : day);\n}\nfunction decodeDate(input) {\n  var dateString = getEncodedValue(input);\n  if (dateString == null) return dateString;\n  var parts = dateString.split(\"-\");\n  if (parts[1] != null) {\n    parts[1] -= 1;\n  } else {\n    parts[1] = 0;\n    parts[2] = 1;\n  }\n  var decoded = _construct(Date, _toConsumableArray(parts));\n  if (isNaN(decoded.getTime())) {\n    return null;\n  }\n  return decoded;\n}\nfunction encodeDateTime(date) {\n  if (date == null) {\n    return date;\n  }\n  return date.toISOString();\n}\nfunction decodeDateTime(input) {\n  var dateString = getEncodedValue(input);\n  if (dateString == null) return dateString;\n  var decoded = new Date(dateString);\n  if (isNaN(decoded.getTime())) {\n    return null;\n  }\n  return decoded;\n}\nfunction encodeBoolean(bool) {\n  if (bool == null) {\n    return bool;\n  }\n  return bool ? \"1\" : \"0\";\n}\nfunction decodeBoolean(input) {\n  var boolStr = getEncodedValue(input);\n  if (boolStr == null) return boolStr;\n  if (boolStr === \"1\") {\n    return true;\n  } else if (boolStr === \"0\") {\n    return false;\n  }\n  return null;\n}\nfunction encodeNumber(num) {\n  if (num == null) {\n    return num;\n  }\n  return String(num);\n}\nfunction decodeNumber(input) {\n  var numStr = getEncodedValue(input);\n  if (numStr == null) return numStr;\n  if (numStr === \"\") return null;\n  var result = +numStr;\n  return result;\n}\nfunction encodeString(str) {\n  if (str == null) {\n    return str;\n  }\n  return String(str);\n}\nfunction decodeString(input) {\n  var str = getEncodedValue(input, true);\n  if (str == null) return str;\n  return String(str);\n}\nfunction decodeEnum(input, enumValues) {\n  var str = decodeString(input);\n  if (str == null) return str;\n  return enumValues.includes(str) ? str : void 0;\n}\nfunction decodeArrayEnum(input, enumValues) {\n  var arr = decodeArray(input);\n  if (arr == null) return arr;\n  if (!arr.length) return void 0;\n  return arr.every(function (str) {\n    return str != null && enumValues.includes(str);\n  }) ? arr : void 0;\n}\nfunction decodeDelimitedArrayEnum(input, enumValues) {\n  var entrySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"_\";\n  if (input != null && Array.isArray(input) && !input.length) return void 0;\n  var arr = decodeDelimitedArray(input, entrySeparator);\n  return decodeArrayEnum(arr, enumValues);\n}\nfunction encodeJson(any) {\n  if (any == null) {\n    return any;\n  }\n  return JSON.stringify(any);\n}\nfunction decodeJson(input) {\n  var jsonStr = getEncodedValue(input);\n  if (jsonStr == null) return jsonStr;\n  var result = null;\n  try {\n    result = JSON.parse(jsonStr);\n  } catch (e) {}\n  return result;\n}\nfunction encodeArray(array) {\n  if (array == null) {\n    return array;\n  }\n  return array;\n}\nfunction decodeArray(input) {\n  var arr = getEncodedValueArray(input);\n  if (arr == null) return arr;\n  return arr;\n}\nfunction encodeNumericArray(array) {\n  if (array == null) {\n    return array;\n  }\n  return array.map(String);\n}\nfunction decodeNumericArray(input) {\n  var arr = decodeArray(input);\n  if (arr == null) return arr;\n  return arr.map(function (d) {\n    return d === \"\" || d == null ? null : +d;\n  });\n}\nfunction encodeDelimitedArray(array) {\n  var entrySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"_\";\n  if (array == null) {\n    return array;\n  }\n  return array.join(entrySeparator);\n}\nfunction decodeDelimitedArray(input) {\n  var entrySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"_\";\n  var arrayStr = getEncodedValue(input, true);\n  if (arrayStr == null) return arrayStr;\n  if (arrayStr === \"\") return [];\n  return arrayStr.split(entrySeparator);\n}\nvar encodeDelimitedNumericArray = encodeDelimitedArray;\nfunction decodeDelimitedNumericArray(arrayStr) {\n  var entrySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"_\";\n  var decoded = decodeDelimitedArray(arrayStr, entrySeparator);\n  if (decoded == null) return decoded;\n  return decoded.map(function (d) {\n    return d === \"\" || d == null ? null : +d;\n  });\n}\nfunction encodeObject(obj) {\n  var keyValSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"-\";\n  var entrySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"_\";\n  if (obj == null) return obj;\n  if (!Object.keys(obj).length) return \"\";\n  return Object.keys(obj).map(function (key) {\n    return \"\".concat(key).concat(keyValSeparator).concat(obj[key]);\n  }).join(entrySeparator);\n}\nfunction decodeObject(input) {\n  var keyValSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"-\";\n  var entrySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"_\";\n  var objStr = getEncodedValue(input, true);\n  if (objStr == null) return objStr;\n  if (objStr === \"\") return {};\n  var obj = {};\n  var keyValSeparatorRegExp = new RegExp(\"\".concat(keyValSeparator, \"(.*)\"));\n  objStr.split(entrySeparator).forEach(function (entryStr) {\n    var _entryStr$split = entryStr.split(keyValSeparatorRegExp),\n      _entryStr$split2 = _slicedToArray(_entryStr$split, 2),\n      key = _entryStr$split2[0],\n      value = _entryStr$split2[1];\n    obj[key] = value;\n  });\n  return obj;\n}\nvar encodeNumericObject = encodeObject;\nfunction decodeNumericObject(input) {\n  var keyValSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"-\";\n  var entrySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"_\";\n  var decoded = decodeObject(input, keyValSeparator, entrySeparator);\n  if (decoded == null) return decoded;\n  var decodedNumberObj = {};\n  for (var _i = 0, _Object$keys = Object.keys(decoded); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    decodedNumberObj[key] = decodeNumber(decoded[key]);\n  }\n  return decodedNumberObj;\n}\nexport { decodeArray, decodeArrayEnum, decodeBoolean, decodeDate, decodeDateTime, decodeDelimitedArray, decodeDelimitedArrayEnum, decodeDelimitedNumericArray, decodeEnum, decodeJson, decodeNumber, decodeNumericArray, decodeNumericObject, decodeObject, decodeString, encodeArray, encodeBoolean, encodeDate, encodeDateTime, encodeDelimitedArray, encodeDelimitedNumericArray, encodeJson, encodeNumber, encodeNumericArray, encodeNumericObject, encodeObject, encodeString };","map":null,"metadata":{},"sourceType":"module"}